/*
 * SQL Generator - Syntax Parser
 * ====================================
 * This file defines the grammar for SQL query analysis and generation
 */

options {
  STATIC = false;          // Do not generate static methods
  UNICODE_INPUT = true;    // Allow Unicode input
  JAVA_UNICODE_ESCAPE = true;  // Allow Java Unicode escape sequences
}

PARSER_BEGIN(SQLGenerator)

import java.util.*;

public class SQLGenerator {
    // Data structure to store table information
    private Map<String, Table> tables = new HashMap<>();
    private String currentTable;

    private static class Table {
        String name;
        List<Column> columns = new ArrayList<>();
        
        public Table(String name) {
            this.name = name;
        }
    }

    private static class Column {
        String name;
        String type;
        boolean isPrimaryKey = false;
        boolean isAutoIncrement = false;
        boolean isRequired = false;
        boolean isUnique = false;
        String defaultValue = null;
        String foreignKeyRef = null;

        public Column(String name, String type) {
            this.name = name;
            this.type = type;
        }

        // Method to generate SQL column definition
        public String toSQL() {
            StringBuilder sql = new StringBuilder();
            sql.append(name).append(" ");
            
            // Map types
            switch(type) {
                case "entier": sql.append("INT"); break;
                case "texte": sql.append("VARCHAR(255)"); break;
                case "date": sql.append("DATE"); break;
                default: sql.append(type);
            }
            
            if (isAutoIncrement) sql.append(" AUTO_INCREMENT");
            if (isPrimaryKey) sql.append(" PRIMARY KEY");
            if (isRequired) sql.append(" NOT NULL");
            if (isUnique) sql.append(" UNIQUE");
            
            if (defaultValue != null) {
                if (defaultValue.equals("aujourd'hui") || defaultValue.equals("maintenant")) {
                    sql.append(" DEFAULT CURRENT_TIMESTAMP");
                } else {
                    sql.append(" DEFAULT ").append(defaultValue);
                }
            }
            
            return sql.toString();
        }
    }

    // Method to generate SQL table creation query
    public String generateSQL() {
        StringBuilder sql = new StringBuilder();
        
        for (Table table : tables.values()) {
            sql.append("CREATE TABLE ").append(table.name).append(" (\n");
            
            List<String> columnDefs = new ArrayList<>();
            List<String> foreignKeys = new ArrayList<>();
            
            for (Column col : table.columns) {
                columnDefs.add("    " + col.toSQL());
                
                if (col.foreignKeyRef != null) {
                    String[] parts = col.foreignKeyRef.split("\\.");
                    foreignKeys.add(String.format("    FOREIGN KEY (%s) REFERENCES %s(%s)",
                        col.name, parts[0], parts[1]));
                }
            }
            
            columnDefs.addAll(foreignKeys);
            sql.append(String.join(",\n", columnDefs));
            sql.append("\n);\n\n");
        }
        
        return sql.toString();
    }

    public static void main(String[] args) {
        SQLGenerator parser = new SQLGenerator(System.in);
        try {
            parser.Input();
            System.out.println(parser.generateSQL());
        } catch (ParseException e) {
            System.err.println("Syntax error: " + e.getMessage());
        }
    }
}

PARSER_END(SQLGenerator)

// Skipping rules for spaces and comments
SKIP : {
    " "
  | "\t"
  | "\n"
  | "\r"
  | <COMMENT: "#" (~["\n","\r"])*>
}

// Token definitions for keywords and symbols
TOKEN : {
    <TABLE: "table">
  | <COLON: ":">
  | <DASH: "-">
  | <COMMA: ",">
  | <LPAREN: "(">
  | <RPAREN: ")">
  | <PRIMARY_KEY: "primary key">
  | <AUTO: "auto">
  | <REQUIRED: "required">
  | <UNIQUE: "unique">
  | <DEFAULT_VALUE: "default value:">
  | <REFERENCE: "reference:">
  | <DOT: ".">
  | <TODAY: "today">
  | <NOW: "now">
  | <IDENTIFIER: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])*>
}

// Input parsing rule
void Input() :
{}
{
    (TableDefinition())*
    <EOF>
}

// Table definition parsing rule
void TableDefinition() :
{
    Token t;
}
{
    <TABLE> t=<IDENTIFIER> <COLON>
    {
        currentTable = t.image;
        tables.put(currentTable, new Table(currentTable));
    }
    (ColumnDefinition())*
}

// Column definition parsing rule
void ColumnDefinition() :
{
    Token name;
    String type = null;
    Column col;
}
{
    <DASH> name=<IDENTIFIER>
    {
        col = new Column(name.image, null);
        tables.get(currentTable).columns.add(col);
    }
    [
        <LPAREN> type=Type() 
        {
            col.type = type;
        }
        (
            <COMMA>
            (
                <PRIMARY_KEY> { col.isPrimaryKey = true; }
              | <AUTO> { col.isAutoIncrement = true; }
              | <REQUIRED> { col.isRequired = true; }
              | <UNIQUE> { col.isUnique = true; }
              | <DEFAULT_VALUE> DefaultValue(col)
              | <REFERENCE> ForeignKeyRef(col)
            )
        )*
        <RPAREN>
    ]
}

// Type parsing rule
String Type() :
{
    Token t;
}
{
    t=<IDENTIFIER>
    { return t.image; }
}

// Default value parsing rule
void DefaultValue(Column col) :
{
    Token t;
}
{
    (
        t=<TODAY> { col.defaultValue = "today"; }
      | t=<NOW> { col.defaultValue = "now"; }
      | t=<IDENTIFIER> { col.defaultValue = t.image; }
    )
}

// Foreign key reference parsing rule
void ForeignKeyRef(Column col) :
{
    Token table, column;
}
{
    table=<IDENTIFIER> <DOT> column=<IDENTIFIER>
    { col.foreignKeyRef = table.image + "." + column.image; }
}
